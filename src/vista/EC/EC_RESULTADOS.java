/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vista.EC;

import java.awt.Color;
import java.awt.event.KeyEvent;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import modelos.EC.EC_EXAMEN_CABECERA;
import modelos.Usuario;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.view.JasperViewer;
import servicios.Conexion;

/**
 *
 * @author MYS3
 */
public class EC_RESULTADOS extends javax.swing.JFrame implements Runnable{
Conexion c=new Conexion();
Connection con;
String hora, minutos, segundos, ampm;
Calendar calendario;
Thread h1;
ResultSet r;
CallableStatement cst;
DefaultTableModel m, msb, m2, m3;
static EC_EXAMEN_CABECERA EC = new EC_EXAMEN_CABECERA();
    /**
     * Creates new form EC_RESULTADOS
     */
    public EC_RESULTADOS() {
        initComponents();
        this.setLocationRelativeTo(null);
        this.getContentPane().setBackground(Color.white);
        this.setExtendedState(JFrame.MAXIMIZED_BOTH);
        
        //FECHA Y HORA
        h1 = new Thread(this);
        h1.start();
        Calendar cal=Calendar.getInstance();          
        lblFecha_EC_R.setText(fechaActual());
        
        mostrarArea_EC();
        inicializar_tabla_Examenes_RESULTADO_EC();
        seleccion();
        
        lblFecha_EC_R.setVisible(false);
        lblHora_EC_R.setVisible(false);
        lblNumeArea_EC.setVisible(false);
        lblG_R.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenuItem2 = new javax.swing.JMenuItem();
        jpanel = new javax.swing.JPanel();
        titulo5 = new javax.swing.JLabel();
        lblUsu = new javax.swing.JLabel();
        fecha_inicio_EC_R = new com.toedter.calendar.JDateChooser();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        cbFecha_EC_R = new javax.swing.JCheckBox();
        fecha_fin_EC_R = new com.toedter.calendar.JDateChooser();
        EC_BUSCAR_R = new javax.swing.JButton();
        jPanel23 = new javax.swing.JPanel();
        txtBuscarPaciente_EC_R = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tb_RESULTADOS_EC = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        lblfecha_F2 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        lblFecha_EC_R = new javax.swing.JLabel();
        lblHora_EC_R = new javax.swing.JLabel();
        lblNumeArea_EC = new javax.swing.JLabel();
        lblNomArea_EC = new javax.swing.JLabel();
        lblfecha_I_R = new javax.swing.JLabel();
        lblG_R = new javax.swing.JLabel();
        lblfecha_F_R = new javax.swing.JLabel();

        jMenuItem1.setText("RESULTADO");
        jPopupMenu1.add(jMenuItem1);
        jPopupMenu1.add(jSeparator1);

        jMenuItem2.setText("VER RESULTADO");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jPopupMenu1.add(jMenuItem2);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        jpanel.setBackground(new java.awt.Color(34, 113, 179));

        titulo5.setBackground(new java.awt.Color(0, 102, 102));
        titulo5.setFont(new java.awt.Font("Segoe UI Light", 0, 36)); // NOI18N
        titulo5.setForeground(new java.awt.Color(255, 255, 255));
        titulo5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titulo5.setText("Examenes EC");
        titulo5.setToolTipText("");
        titulo5.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        lblUsu.setFont(new java.awt.Font("Segoe UI Light", 0, 25)); // NOI18N
        lblUsu.setForeground(new java.awt.Color(255, 255, 255));
        lblUsu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/iconos/User-32.png"))); // NOI18N
        lblUsu.setText("Usuario");

        fecha_inicio_EC_R.setBackground(new java.awt.Color(255, 255, 255));
        fecha_inicio_EC_R.setDateFormatString("dd-MM-yyyy");
        fecha_inicio_EC_R.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                fecha_inicio_EC_RPropertyChange(evt);
            }
        });
        fecha_inicio_EC_R.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                fecha_inicio_EC_RKeyTyped(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI Light", 0, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("FECHA INICIO:");

        jLabel2.setFont(new java.awt.Font("Segoe UI Light", 0, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("FECHA TERMINO:");

        jLabel4.setFont(new java.awt.Font("Segoe UI Light", 0, 12)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("AM, DNI , HC, APELLIDOS Y NOMBRES");

        cbFecha_EC_R.setBackground(new java.awt.Color(255, 255, 255));
        cbFecha_EC_R.setFont(new java.awt.Font("Segoe UI Light", 0, 12)); // NOI18N
        cbFecha_EC_R.setForeground(new java.awt.Color(255, 255, 255));
        cbFecha_EC_R.setText("BUSCAR POR RANGO DE FECHAS");
        cbFecha_EC_R.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbFecha_EC_RActionPerformed(evt);
            }
        });
        cbFecha_EC_R.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                cbFecha_EC_RPropertyChange(evt);
            }
        });

        fecha_fin_EC_R.setBackground(new java.awt.Color(255, 255, 255));
        fecha_fin_EC_R.setDateFormatString("dd-MM-yyyy");
        fecha_fin_EC_R.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                fecha_fin_EC_RKeyTyped(evt);
            }
        });

        EC_BUSCAR_R.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/iconos/BÃºsqueda-32.png"))); // NOI18N
        EC_BUSCAR_R.setContentAreaFilled(false);
        EC_BUSCAR_R.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EC_BUSCAR_RActionPerformed(evt);
            }
        });

        jPanel23.setBackground(new java.awt.Color(255, 255, 255));

        txtBuscarPaciente_EC_R.setBorder(null);
        txtBuscarPaciente_EC_R.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                txtBuscarPaciente_EC_RCaretUpdate(evt);
            }
        });
        txtBuscarPaciente_EC_R.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtBuscarPaciente_EC_RKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtBuscarPaciente_EC_RKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout jPanel23Layout = new javax.swing.GroupLayout(jPanel23);
        jPanel23.setLayout(jPanel23Layout);
        jPanel23Layout.setHorizontalGroup(
            jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel23Layout.createSequentialGroup()
                .addComponent(txtBuscarPaciente_EC_R)
                .addContainerGap())
        );
        jPanel23Layout.setVerticalGroup(
            jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(txtBuscarPaciente_EC_R, javax.swing.GroupLayout.DEFAULT_SIZE, 31, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jpanelLayout = new javax.swing.GroupLayout(jpanel);
        jpanel.setLayout(jpanelLayout);
        jpanelLayout.setHorizontalGroup(
            jpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblUsu, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jpanelLayout.createSequentialGroup()
                        .addGroup(jpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(titulo5)
                            .addComponent(cbFecha_EC_R)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpanelLayout.createSequentialGroup()
                        .addGroup(jpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jPanel23, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jpanelLayout.createSequentialGroup()
                                .addGroup(jpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel1))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(fecha_inicio_EC_R, javax.swing.GroupLayout.DEFAULT_SIZE, 168, Short.MAX_VALUE)
                                    .addComponent(fecha_fin_EC_R, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(EC_BUSCAR_R, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jpanelLayout.setVerticalGroup(
            jpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpanelLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(titulo5)
                .addGap(93, 93, 93)
                .addComponent(cbFecha_EC_R, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(fecha_inicio_EC_R, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpanelLayout.createSequentialGroup()
                        .addGroup(jpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jpanelLayout.createSequentialGroup()
                                .addGap(40, 40, 40)
                                .addComponent(fecha_fin_EC_R, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpanelLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel2)))
                        .addGap(55, 55, 55)
                        .addComponent(jPanel23, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(jLabel4))
                    .addGroup(jpanelLayout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(EC_BUSCAR_R)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblUsu, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jScrollPane1.setBorder(javax.swing.BorderFactory.createCompoundBorder());

        tb_RESULTADOS_EC = new javax.swing.JTable(){
            public boolean isCellEditable(int rowIndex, int colIndex) {
                return false; //Disallow the editing of any cell
            }
        };
        tb_RESULTADOS_EC.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tb_RESULTADOS_EC.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tb_RESULTADOS_EC.setComponentPopupMenu(jPopupMenu1);
        tb_RESULTADOS_EC.setRowHeight(35);
        tb_RESULTADOS_EC.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tb_RESULTADOS_EC);

        jPanel4.setBackground(new java.awt.Color(43, 43, 43));

        jLabel15.setFont(new java.awt.Font("Segoe UI Light", 0, 23)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(255, 255, 255));
        jLabel15.setText("EXAMENES DEL DIA");

        lblfecha_F2.setFont(new java.awt.Font("Segoe UI Light", 1, 18)); // NOI18N
        lblfecha_F2.setForeground(new java.awt.Color(255, 255, 255));
        lblfecha_F2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblfecha_F2.setText(" ");

        jLabel13.setForeground(new java.awt.Color(43, 43, 43));
        jLabel13.setText("jLabel3");

        jLabel14.setForeground(new java.awt.Color(43, 43, 43));
        jLabel14.setText("jLabel3");

        lblFecha_EC_R.setForeground(new java.awt.Color(255, 255, 255));
        lblFecha_EC_R.setText("jLabel3");

        lblHora_EC_R.setForeground(new java.awt.Color(255, 255, 255));
        lblHora_EC_R.setText("jLabel3");

        lblNumeArea_EC.setForeground(new java.awt.Color(255, 255, 255));
        lblNumeArea_EC.setText("jLabel3");

        lblNomArea_EC.setFont(new java.awt.Font("Segoe UI Light", 1, 14)); // NOI18N
        lblNomArea_EC.setForeground(new java.awt.Color(255, 255, 255));
        lblNomArea_EC.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblNomArea_EC.setText("jLabel3");

        lblfecha_I_R.setFont(new java.awt.Font("Segoe UI Light", 0, 18)); // NOI18N
        lblfecha_I_R.setForeground(new java.awt.Color(255, 255, 255));
        lblfecha_I_R.setText("  ");

        lblG_R.setFont(new java.awt.Font("Segoe UI Light", 0, 18)); // NOI18N
        lblG_R.setForeground(new java.awt.Color(255, 255, 255));
        lblG_R.setText("-");

        lblfecha_F_R.setFont(new java.awt.Font("Segoe UI Light", 0, 18)); // NOI18N
        lblfecha_F_R.setForeground(new java.awt.Color(255, 255, 255));
        lblfecha_F_R.setText(" ");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(186, 186, 186)
                        .addComponent(lblFecha_EC_R, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblHora_EC_R, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblNumeArea_EC)
                        .addGap(52, 52, 52))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(lblfecha_I_R, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblG_R)
                        .addGap(10, 10, 10)
                        .addComponent(lblfecha_F_R, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(273, 273, 273)
                        .addComponent(lblfecha_F2, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(35, 35, 35)
                .addComponent(lblNomArea_EC, javax.swing.GroupLayout.PREFERRED_SIZE, 354, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(377, 377, 377)
                .addComponent(jLabel13)
                .addGap(183, 183, 183)
                .addComponent(jLabel14)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(jLabel15))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblNumeArea_EC)
                                    .addComponent(lblNomArea_EC)))
                            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(lblFecha_EC_R)
                                .addComponent(lblHora_EC_R)))))
                .addGap(19, 19, 19)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblfecha_F2)
                    .addComponent(lblfecha_I_R)
                    .addComponent(lblG_R)
                    .addComponent(lblfecha_F_R))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(jLabel14))
                .addContainerGap(13, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jpanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(129, 129, 129)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 591, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(jpanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void fecha_inicio_EC_RPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_fecha_inicio_EC_RPropertyChange
        //validar_fecha();
    }//GEN-LAST:event_fecha_inicio_EC_RPropertyChange

    private void fecha_inicio_EC_RKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fecha_inicio_EC_RKeyTyped
        //        char tecla= evt.getKeyChar();
        //        if(tecla==KeyEvent.VK_ENTER){
            //            btnBuscarP.doClick();
            //        }
    }//GEN-LAST:event_fecha_inicio_EC_RKeyTyped

    private void txtBuscarPaciente_EC_RCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_txtBuscarPaciente_EC_RCaretUpdate
        if(cbFecha_EC_R.isSelected()== true && (fecha_inicio_EC_R.getDate()==null || fecha_fin_EC_R.getDate()==null)){
        JOptionPane.showMessageDialog(rootPane, "Debe seleccionar un rango de fechas");
        }
        
        if(cbFecha_EC_R.isSelected()==true){
            buscar_resultado_Fechas_EC();
        }else if(cbFecha_EC_R.isSelected()==false){
            BuscarResultadosDIA_EC();
        }
    }//GEN-LAST:event_txtBuscarPaciente_EC_RCaretUpdate

    private void txtBuscarPaciente_EC_RKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBuscarPaciente_EC_RKeyTyped
        char tecla= evt.getKeyChar();
        if(tecla==KeyEvent.VK_ENTER){
            tb_RESULTADOS_EC.getSelectionModel().setSelectionInterval(0, 0);
            tb_RESULTADOS_EC.requestFocus();
        }
    }//GEN-LAST:event_txtBuscarPaciente_EC_RKeyTyped

    private void cbFecha_EC_RActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbFecha_EC_RActionPerformed
        seleccion();
    }//GEN-LAST:event_cbFecha_EC_RActionPerformed

    private void cbFecha_EC_RPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_cbFecha_EC_RPropertyChange

    }//GEN-LAST:event_cbFecha_EC_RPropertyChange

    private void fecha_fin_EC_RKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fecha_fin_EC_RKeyTyped

    }//GEN-LAST:event_fecha_fin_EC_RKeyTyped

    private void EC_BUSCAR_RActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EC_BUSCAR_RActionPerformed
        try{

            String fecha = lblFecha_EC_R.getText();
            int diaAC = Integer.parseInt(fecha.substring(0, 2));
            int mesAC = Integer.parseInt(fecha.substring(3, 5));
            int anioAC = Integer.parseInt(fecha.substring(6, 10));

            String diaIN = new SimpleDateFormat("dd").format(fecha_inicio_EC_R.getDate());
            String mesIN = new SimpleDateFormat("MM").format(fecha_inicio_EC_R.getDate());
            String anioIN = new SimpleDateFormat("yyy").format(fecha_inicio_EC_R.getDate());
         
//            int diaIN = fecha_inicio_EC_R.getCalendar().get(Calendar.DAY_OF_MONTH);
//            int mesIN = fecha_inicio_EC_R.getCalendar().get(Calendar.MONTH) + 1;
//            int anioIN = fecha_inicio_EC_R.getCalendar().get(Calendar.YEAR);

            String diaFN = new SimpleDateFormat("dd").format(fecha_fin_EC_R.getDate());
            String mesFN = new SimpleDateFormat("MM").format(fecha_fin_EC_R.getDate());
            String anioFN = new SimpleDateFormat("yyy").format(fecha_fin_EC_R.getDate());
         
//            
//            int diaFN = fecha_fin_EC_R.getCalendar().get(Calendar.DAY_OF_MONTH);
//            int mesFN = fecha_fin_EC_R.getCalendar().get(Calendar.MONTH) + 1;
//            int anioFN = fecha_fin_EC_R.getCalendar().get(Calendar.YEAR);

            //            if(fecha_inicio.getDate()==null || fecha_fin.getDate()==null){
                //              JOptionPane.showMessageDialog(rootPane, "Seleccione un rango de fechas");
                //            }else{
                //                 if(diaIN > diaAC || mesIN > mesAC || anioIN > anioAC){
                    //                        JOptionPane.showMessageDialog(rootPane, "Seleccione una fecha de inicio \n menor a la actual: " + diaAC + "-" +
                        //                        mesAC + "-" + anioAC);
                    //                        fecha_inicio.setDate(null);
                    //                 }else{
                    //                       if(diaFN > diaAC || mesFN > mesAC || anioFN > anioAC){
                        //                                JOptionPane.showMessageDialog(rootPane, "Seleccione una fecha de termino \n menor a la actual: " + diaAC + "-" +
                            //                                mesAC + "-" + anioAC);
                        //                                fecha_fin.setDate(null);
                        //                       }else{
                        buscar_resultado_Fechas_EC();
                        lblfecha_I_R.setText(diaIN + "/" + mesIN + "/" + anioIN);
                        lblfecha_F_R.setText(diaFN + "/" + mesFN + "/" + anioFN);
                        lblG_R.setVisible(true);
                        lblfecha_I_R.setVisible(true);
                        lblfecha_F_R.setVisible(true);
                        txtBuscarPaciente_EC_R.requestFocus();
                        //                       }
                    //                }
                //
                //            }

            //            if(tb_Examenes.getRowCount()==0){
                //                lblRegistro.setVisible(true);
                ////                JOptionPane.showMessageDialog(rootPane, "No se encontraron registros");
                //            }else{
                //                lblRegistro.setVisible(false);
                //            }

        }catch(Exception e) {
            JOptionPane.showMessageDialog(rootPane, "Seleccione un rango de fechas");
        }
    }//GEN-LAST:event_EC_BUSCAR_RActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
         try {
           int filaselec=tb_RESULTADOS_EC.getSelectedRow();
           if(filaselec<0){
               JOptionPane.showMessageDialog(rootPane, "Seleccione un Registro");
           }else{
             String cod=tb_RESULTADOS_EC.getValueAt(filaselec, 8).toString();
         
            Map parametros=new HashMap();
            parametros.put("COD_DET_COD",cod);
            
                JasperPrint informe=JasperFillManager.fillReport(getClass().
                    getResourceAsStream("/Reportes/EC/EC_RESULTADO.jasper"), parametros,c.conectar());

                JasperViewer ventana= new JasperViewer(informe,false);
                ventana.setTitle("RESULTADO - "+tb_RESULTADOS_EC.getValueAt(filaselec, 7).toString());
                ventana.setVisible(true);
           }
           } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Error al Cargar el reporte"+e.getMessage());
           }
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void txtBuscarPaciente_EC_RKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBuscarPaciente_EC_RKeyReleased
        txtBuscarPaciente_EC_R.setText(txtBuscarPaciente_EC_R.getText().toUpperCase());
    }//GEN-LAST:event_txtBuscarPaciente_EC_RKeyReleased

    public void buscar_resultado_Fechas_EC(){
    
           int dia = fecha_inicio_EC_R.getCalendar().get(Calendar.DAY_OF_MONTH);
           int mes = fecha_inicio_EC_R.getCalendar().get(Calendar.MONTH) + 1;
           int anio = fecha_inicio_EC_R.getCalendar().get(Calendar.YEAR);
                       
           int fechaI;
                       
                       if(mes<10 && dia<10){
                           fechaI = Integer.parseInt(anio + "0" + mes + "0" + dia);
                       }else{                           
                           if(mes<10 && dia>=10){
                           fechaI = Integer.parseInt(anio + "0"+ mes + dia);
                           }else{
                               if(mes >=10 && dia<10){
                                 fechaI = Integer.parseInt( anio + mes + "0"+ dia);
                               }else{
                                   fechaI = anio +  mes + dia ;
                               }
                           }
                       }

                       
           int dia1 = fecha_fin_EC_R.getCalendar().get(Calendar.DAY_OF_MONTH);
           int mes1 = fecha_fin_EC_R.getCalendar().get(Calendar.MONTH) + 1;
           int anio1 = fecha_fin_EC_R.getCalendar().get(Calendar.YEAR);
                       
           int fechaF;
                       
                       if(mes1<10 && dia1<10){
                           fechaF = Integer.parseInt(anio1 + "0" + mes1 + "0" + dia1);
                       }else{                           
                           if(mes1<10 && dia1>=10){
                           fechaF = Integer.parseInt(anio1 + "0"+ mes1 +  dia1);
                           }else{
                               if(mes1 >=10 && dia1<10){
                                 fechaF = Integer.parseInt(anio1  + mes1 + "0"+ dia1);
                               }else{
                                   fechaF = anio1 + mes1 + dia1 ;
                               }
                           }
                       }

                       
        
        String buscar="",servicioArea="";
        buscar = txtBuscarPaciente_EC_R.getText();
        servicioArea = lblNumeArea_EC.getText();
        
        
        
    String consulta="";
        try {
            tb_RESULTADOS_EC.setModel(new DefaultTableModel());
            String titulos[]={"ID_HC","NÂ° HC","Nombre del Paciente","DNI",
            "Acto MÃ©dico","Nomen. Caja","Nomenclatura","Fecha Result.", "Cod_Detalle"};
            m3=new DefaultTableModel(null,titulos);
            JTable p=new JTable(m3);
            String fila[]=new String[9];

            EC_EXAMEN_CABECERA obj=new EC_EXAMEN_CABECERA();
            consulta="exec RX_EC_RESULTADO_BUSCAR_FECHAS_RX_1 ?,?,?";
            PreparedStatement cmd = obj.getCn().prepareStatement(consulta);
            cmd.setInt(1,fechaI);
            cmd.setInt(2, fechaF);
            cmd.setString(3, buscar);
            
            ResultSet r= cmd.executeQuery();
            int c=1;
            while(r.next()){               
                fila[0]=r.getString(1);
                fila[1]=r.getString(2);
                fila[2]=r.getString(3);
                fila[3]=r.getString(4);
                fila[4]=r.getString(5);
                fila[5]=r.getString(6);
                fila[6]=r.getString(7);
                fila[7]=r.getString(8);
                fila[8]=r.getString(9);
                
                m3.addRow(fila);
                c++;
            }
            tb_RESULTADOS_EC.setModel(m3);
            TableRowSorter<TableModel> elQueOrdena=new TableRowSorter<TableModel>(m3);
            tb_RESULTADOS_EC.setRowSorter(elQueOrdena);
            this.tb_RESULTADOS_EC.setModel(m3);
            
            formatoExamen_resultado_ec();
            
            
            
        }catch (Exception e) {
            System.out.println("Error buscar examen: " + e.getMessage());
        }
    }
    
    public void mostrarArea_EC(){
        String consulta="";
        try {
            consulta="EXEC RX_EC_SERVICIO_EC ";
            PreparedStatement cmd = EC.getCn().prepareStatement(consulta);        
            ResultSet r= cmd.executeQuery();
            int c=1;
            while(r.next()){
                lblNumeArea_EC.setText(r.getString(1));
                lblNomArea_EC.setText(r.getString(2));
            }
            
        } catch (Exception e) {
            System.out.println("Error carga area : " + e.getMessage());
        }
    }
    
    public void seleccion(){
        if(cbFecha_EC_R.isSelected()==true){
            fecha_inicio_EC_R.setEnabled(true);
            fecha_fin_EC_R.setEnabled(true);
            txtBuscarPaciente_EC_R.setText("");
//            lblfecha_I_R.setVisible(true);
//            lblfecha_F_R.setVisible(true);
//            lblG_R.setVisible(true);
            EC_BUSCAR_R.setEnabled(true);
        }else{
            fecha_inicio_EC_R.setEnabled(false);
            fecha_fin_EC_R.setEnabled(false);
            fecha_inicio_EC_R.setDate(null);
            fecha_fin_EC_R.setDate(null);
            txtBuscarPaciente_EC_R.setText("");
            lblfecha_I_R.setVisible(false);
            lblfecha_F_R.setVisible(false);
            lblG_R.setVisible(false);
            EC_BUSCAR_R.setEnabled(false);
            txtBuscarPaciente_EC_R.requestFocus();
        }
    }
    
    public static String fechaActual(){
        Date now = new Date(System.currentTimeMillis());
        SimpleDateFormat date = new SimpleDateFormat("dd/MM/yyyy");
        return date.format(now);
    }
    
    public void calcula() {
        Calendar calendario = new GregorianCalendar();
        java.util.Date fechaHoraActual = new java.util.Date();


        calendario.setTime(fechaHoraActual);
        ampm = calendario.get(Calendar.AM_PM) == Calendar.AM ? "AM" : "PM";

        if (ampm.equals("PM")) {
            int h = calendario.get(Calendar.HOUR_OF_DAY) - 12;
            hora = h > 9 ? "" + h : "0" + h;
        } else {
            hora = calendario.get(Calendar.HOUR_OF_DAY) > 9 ? "" + calendario.get(Calendar.HOUR_OF_DAY) : "0" + calendario.get(Calendar.HOUR_OF_DAY);
        }
        minutos = calendario.get(Calendar.MINUTE) > 9 ? "" + calendario.get(Calendar.MINUTE) : "0" + calendario.get(Calendar.MINUTE);
        segundos = calendario.get(Calendar.SECOND) > 9 ? "" + calendario.get(Calendar.SECOND) : "0" + calendario.get(Calendar.SECOND);
    }
    
    public void mostrarPacientes_RESULTADO_EC(){
        try {
                     
            String consulta="";
            
            tb_RESULTADOS_EC.setModel(new DefaultTableModel());
            String titulos[]={"ID_HC","NÂ° HC","Nombre del Paciente","DNI",
            "Acto MÃ©dico","Nomen. Caja","Nomenclatura","Fecha Result.", "Cod_Detalle"};
            m=new DefaultTableModel(null,titulos);
            JTable p=new JTable(m);
            String fila[]=new String[9];
            Usuario obj=new Usuario();
            consulta="exec RX_EC_RESULTADO_LISTAR_EC_1 ";
            PreparedStatement cmd = obj.getCn().prepareStatement(consulta);
            
            ResultSet r= cmd.executeQuery();
            while(r.next()){
            for (int i=0; i<9; i++){
            fila[i]=r.getString(i+1);
            }
                m.addRow(fila);
            }
            tb_RESULTADOS_EC.setModel(m);
            TableRowSorter<TableModel> elQueOrdena=new TableRowSorter<TableModel>(m);
            tb_RESULTADOS_EC.setRowSorter(elQueOrdena);
            tb_RESULTADOS_EC.setModel(m);
                       
            formatoExamen_resultado_ec();
            
        } catch (Exception e) {
            System.out.println("Error mostrar paciente: " + e.getMessage());
        }       
    }
    
    public void BuscarResultadosDIA_EC(){
        try {
                     
            String consulta="";
            
            tb_RESULTADOS_EC.setModel(new DefaultTableModel());
            String titulos[]={"ID_HC","NÂ° HC","Nombre del Paciente","DNI",
            "Acto MÃ©dico","Nomen. Caja","Nomenclatura","Fecha Result.", "Cod_Detalle"};
            m2=new DefaultTableModel(null,titulos);
            JTable p=new JTable(m2);
            String fila[]=new String[9];
            Usuario obj=new Usuario();
            consulta="exec RX_EC_RESULTADO_BUSCAR_LISTA_DIA_1 ?";
            PreparedStatement cmd = obj.getCn().prepareStatement(consulta);            
            cmd.setString(1, txtBuscarPaciente_EC_R.getText());
            
            ResultSet r= cmd.executeQuery();
            while(r.next()){
            for (int i=0; i<9; i++){
            fila[i]=r.getString(i+1);
            }
                m2.addRow(fila);
            }
            tb_RESULTADOS_EC.setModel(m2);
            TableRowSorter<TableModel> elQueOrdena=new TableRowSorter<TableModel>(m2);
            tb_RESULTADOS_EC.setRowSorter(elQueOrdena);
            tb_RESULTADOS_EC.setModel(m2);
                      
            formatoExamen_resultado_ec();
            
           
            
        } catch (Exception e) {
            System.out.println("Error mostrar paciente: " + e.getMessage());
        }
        
    }

    public void inicializar_tabla_Examenes_RESULTADO_EC(){       
        try {
            
            String titulosb[]={"ID_HC","NÂ° HC","Nombre del Paciente","DNI",
            "Acto MÃ©dico","Nomen. Caja","Nomenclatura","Fecha Result.","Cod_Detalle"};
            msb=new DefaultTableModel(null,titulosb);
            JTable psb=new JTable(msb);
            String filasb[]=new String[9];
            tb_RESULTADOS_EC.setModel(msb);
            TableRowSorter<TableModel> elQueOrdenasb=new TableRowSorter<TableModel>(msb);
            tb_RESULTADOS_EC.setRowSorter(elQueOrdenasb);
            this.tb_RESULTADOS_EC.setModel(msb);
            
            formatoExamen_resultado_ec();
            
        } catch (Exception e) {
            System.out.println("error inicializar tabla: " + e);
        }
            
    }
    
    public void formatoExamen_resultado_ec(){                    
            tb_RESULTADOS_EC.getColumnModel().getColumn(0).setPreferredWidth(80); 
            tb_RESULTADOS_EC.getColumnModel().getColumn(1).setPreferredWidth(80);
            tb_RESULTADOS_EC.getColumnModel().getColumn(2).setPreferredWidth(300);
            tb_RESULTADOS_EC.getColumnModel().getColumn(3).setPreferredWidth(80);
            tb_RESULTADOS_EC.getColumnModel().getColumn(4).setPreferredWidth(80); 
            tb_RESULTADOS_EC.getColumnModel().getColumn(5).setPreferredWidth(100);
            tb_RESULTADOS_EC.getColumnModel().getColumn(6).setPreferredWidth(400);  
            tb_RESULTADOS_EC.getColumnModel().getColumn(7).setPreferredWidth(110);
            tb_RESULTADOS_EC.getColumnModel().getColumn(7).setPreferredWidth(100);
//            //Ocultar
            tb_RESULTADOS_EC.getColumnModel().getColumn(0).setMinWidth(0);
            tb_RESULTADOS_EC.getColumnModel().getColumn(0).setMaxWidth(0);                
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EC_RESULTADOS.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EC_RESULTADOS.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EC_RESULTADOS.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EC_RESULTADOS.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EC_RESULTADOS().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton EC_BUSCAR_R;
    private javax.swing.JCheckBox cbFecha_EC_R;
    private com.toedter.calendar.JDateChooser fecha_fin_EC_R;
    private com.toedter.calendar.JDateChooser fecha_inicio_EC_R;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JPanel jPanel23;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPanel jpanel;
    private javax.swing.JLabel lblFecha_EC_R;
    private javax.swing.JLabel lblG_R;
    private javax.swing.JLabel lblHora_EC_R;
    private javax.swing.JLabel lblNomArea_EC;
    private javax.swing.JLabel lblNumeArea_EC;
    public static javax.swing.JLabel lblUsu;
    private javax.swing.JLabel lblfecha_F2;
    private javax.swing.JLabel lblfecha_F_R;
    private javax.swing.JLabel lblfecha_I_R;
    private javax.swing.JTable tb_RESULTADOS_EC;
    private javax.swing.JLabel titulo5;
    private javax.swing.JTextField txtBuscarPaciente_EC_R;
    // End of variables declaration//GEN-END:variables

    @Override
    public void run() {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    Thread ct = Thread.currentThread();
        while (ct == h1) {
            calcula();
            if(cbFecha_EC_R.isSelected()==false){
                mostrarPacientes_RESULTADO_EC();
            }
            
            lblHora_EC_R.setText(hora + ":" + minutos + ":" + segundos + " " + ampm);
            try {
                Thread.sleep(10000);
            } catch (InterruptedException e) {
            }
        }
    }
}

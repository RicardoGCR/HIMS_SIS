/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vista.RX;

import Reportes.Reportes;
import java.awt.Color;
import java.awt.HeadlessException;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import modelos.RX.RX_EC_BUSCAR_EXAMEN_CAJA;
import modelos.RX.RX_EC_EXAMEN;
import modelos.Usuario;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperExportManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.view.JasperViewer;
import servicios.Conexion;

/**
 *
 * @author MYS3
 */
public class RX_EC_BUSCAR_RESULTADOS extends javax.swing.JFrame implements Runnable{

Conexion c=new Conexion();
Connection con;
String hora, minutos, segundos, ampm;
Calendar calendario;
Thread h1;
ResultSet r;
CallableStatement cst;
DefaultTableModel msb, m1, m2, m3;
static RX_EC_EXAMEN RC = new RX_EC_EXAMEN();
    /**
     * Creates new form RX_EC_BUSCAR_RESULTADOS
     */
    public RX_EC_BUSCAR_RESULTADOS() {
        initComponents();
        setIconImage(new ImageIcon(getClass().getResource("/imagenes/iconos/icons8-Tarea del sistema-24.png")).getImage());
        c.conectar();
        this.setLocationRelativeTo(null);
        this.getContentPane().setBackground(Color.white);
        this.setExtendedState(JFrame.MAXIMIZED_BOTH);
        
        mostrarArea();
        inicializar_tabla_Examenes();
        mostrarPacientes();
        seleccion();
        
        //FECHA Y HORA
        h1 = new Thread(this);
        h1.start();
        Calendar cal=Calendar.getInstance();          
        lblFecha_R.setText(fechaActual());
        
        lblFecha_R.setVisible(false);
        lblHora_R.setVisible(false);
        lblNumeArea.setVisible(false);
        lblG_R.setVisible(false);
        
        btnBuscarP.setEnabled(false);
        txtBuscarPaciente_R.requestFocus();
        
        //CERRAR CON ESCAPE
        getRootPane().getInputMap(javax.swing.JComponent.WHEN_IN_FOCUSED_WINDOW).put(
        javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_ESCAPE, 0), "Cancel");
        
        getRootPane().getActionMap().put("Cancel", new javax.swing.AbstractAction(){
            @Override
            public void actionPerformed(java.awt.event.ActionEvent e)
            {
                
                cerrar();
                                
            }
        });
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        VerExamenes = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        Ver_Resultado = new javax.swing.JMenuItem();
        jpanel = new javax.swing.JPanel();
        titulo5 = new javax.swing.JLabel();
        lblUsu = new javax.swing.JLabel();
        fecha_inicio_R = new com.toedter.calendar.JDateChooser();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        btnBuscarP = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        cbFecha_R = new javax.swing.JCheckBox();
        fecha_fin_R = new com.toedter.calendar.JDateChooser();
        jPanel23 = new javax.swing.JPanel();
        txtBuscarPaciente_R = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tb_Examenes_R = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        lblfecha_F2 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        lblfecha_I_R = new javax.swing.JLabel();
        lblG_R = new javax.swing.JLabel();
        lblfecha_F_R = new javax.swing.JLabel();
        lblFecha_R = new javax.swing.JLabel();
        lblHora_R = new javax.swing.JLabel();
        lblNumeArea = new javax.swing.JLabel();
        lblNomArea = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        VerExamenes.setText("RESULTADOS");
        VerExamenes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VerExamenesActionPerformed(evt);
            }
        });
        jPopupMenu1.add(VerExamenes);
        jPopupMenu1.add(jSeparator1);

        Ver_Resultado.setText("VER RESULTADO");
        Ver_Resultado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Ver_ResultadoActionPerformed(evt);
            }
        });
        jPopupMenu1.add(Ver_Resultado);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Diagnóstico por Imágenes RX");

        jpanel.setBackground(new java.awt.Color(240, 64, 87));

        titulo5.setBackground(new java.awt.Color(0, 102, 102));
        titulo5.setFont(new java.awt.Font("Segoe UI Light", 0, 36)); // NOI18N
        titulo5.setForeground(new java.awt.Color(255, 255, 255));
        titulo5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titulo5.setText("Resultados RX");
        titulo5.setToolTipText("");
        titulo5.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        lblUsu.setFont(new java.awt.Font("Segoe UI Light", 0, 24)); // NOI18N
        lblUsu.setForeground(new java.awt.Color(255, 255, 255));
        lblUsu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/iconos/User-32.png"))); // NOI18N
        lblUsu.setText("Usuario");

        fecha_inicio_R.setBackground(new java.awt.Color(255, 255, 255));
        fecha_inicio_R.setDateFormatString("dd-MM-yyyy");
        fecha_inicio_R.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                fecha_inicio_RPropertyChange(evt);
            }
        });
        fecha_inicio_R.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                fecha_inicio_RKeyTyped(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Inicio :");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Termino :");

        btnBuscarP.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/iconos/Búsqueda-27.png"))); // NOI18N
        btnBuscarP.setContentAreaFilled(false);
        btnBuscarP.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnBuscarP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarPActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("AM, DNI , HC, APELLIDOS Y NOMBRES");

        cbFecha_R.setBackground(new java.awt.Color(255, 255, 255));
        cbFecha_R.setFont(new java.awt.Font("Segoe UI", 0, 13)); // NOI18N
        cbFecha_R.setForeground(new java.awt.Color(255, 255, 255));
        cbFecha_R.setText("Buscar por Rango de Fechas");
        cbFecha_R.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbFecha_RActionPerformed(evt);
            }
        });
        cbFecha_R.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                cbFecha_RPropertyChange(evt);
            }
        });

        fecha_fin_R.setBackground(new java.awt.Color(255, 255, 255));
        fecha_fin_R.setDateFormatString("dd-MM-yyyy");
        fecha_fin_R.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                fecha_fin_RKeyTyped(evt);
            }
        });

        jPanel23.setBackground(new java.awt.Color(255, 255, 255));

        txtBuscarPaciente_R.setBorder(null);
        txtBuscarPaciente_R.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                txtBuscarPaciente_RCaretUpdate(evt);
            }
        });
        txtBuscarPaciente_R.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtBuscarPaciente_RKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtBuscarPaciente_RKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout jPanel23Layout = new javax.swing.GroupLayout(jPanel23);
        jPanel23.setLayout(jPanel23Layout);
        jPanel23Layout.setHorizontalGroup(
            jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel23Layout.createSequentialGroup()
                .addComponent(txtBuscarPaciente_R)
                .addContainerGap())
        );
        jPanel23Layout.setVerticalGroup(
            jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(txtBuscarPaciente_R, javax.swing.GroupLayout.DEFAULT_SIZE, 26, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jpanelLayout = new javax.swing.GroupLayout(jpanel);
        jpanel.setLayout(jpanelLayout);
        jpanelLayout.setHorizontalGroup(
            jpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpanelLayout.createSequentialGroup()
                        .addComponent(jPanel23, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(54, 54, 54))
                    .addGroup(jpanelLayout.createSequentialGroup()
                        .addGroup(jpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cbFecha_R)
                            .addComponent(titulo5)
                            .addGroup(jpanelLayout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(36, 36, 36)
                                .addComponent(fecha_inicio_R, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(10, 10, 10))
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(48, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpanelLayout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(fecha_fin_R, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnBuscarP, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
            .addComponent(lblUsu, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jpanelLayout.setVerticalGroup(
            jpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpanelLayout.createSequentialGroup()
                .addComponent(titulo5, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(99, 99, 99)
                .addComponent(cbFecha_R, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22)
                .addGroup(jpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1)
                    .addComponent(fecha_inicio_R, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpanelLayout.createSequentialGroup()
                        .addGap(55, 55, 55)
                        .addGroup(jpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(fecha_fin_R, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)))
                    .addGroup(jpanelLayout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addComponent(btnBuscarP, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(31, 31, 31)
                .addComponent(jPanel23, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 222, Short.MAX_VALUE)
                .addComponent(lblUsu, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jScrollPane1.setBorder(javax.swing.BorderFactory.createCompoundBorder());

        tb_Examenes_R = new javax.swing.JTable(){
            public boolean isCellEditable(int rowIndex, int colIndex) {
                return false; //Disallow the editing of any cell
            }
        };
        tb_Examenes_R.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tb_Examenes_R.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tb_Examenes_R.setComponentPopupMenu(jPopupMenu1);
        tb_Examenes_R.setRowHeight(35);
        tb_Examenes_R.setSelectionBackground(new java.awt.Color(102, 102, 102));
        tb_Examenes_R.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tb_Examenes_R);

        jPanel4.setBackground(new java.awt.Color(43, 43, 43));

        jLabel15.setFont(new java.awt.Font("Segoe UI Light", 0, 23)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(255, 255, 255));
        jLabel15.setText("Exámenes del Día");

        lblfecha_F2.setFont(new java.awt.Font("Segoe UI Light", 1, 18)); // NOI18N
        lblfecha_F2.setForeground(new java.awt.Color(255, 255, 255));
        lblfecha_F2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblfecha_F2.setText(" ");

        jLabel5.setForeground(new java.awt.Color(43, 43, 43));
        jLabel5.setText("jLabel3");

        lblfecha_I_R.setFont(new java.awt.Font("Segoe UI Light", 0, 18)); // NOI18N
        lblfecha_I_R.setForeground(new java.awt.Color(255, 255, 255));
        lblfecha_I_R.setText("  ");

        lblG_R.setFont(new java.awt.Font("Segoe UI Light", 0, 18)); // NOI18N
        lblG_R.setForeground(new java.awt.Color(255, 255, 255));
        lblG_R.setText("-");

        lblfecha_F_R.setFont(new java.awt.Font("Segoe UI Light", 0, 18)); // NOI18N
        lblfecha_F_R.setForeground(new java.awt.Color(255, 255, 255));
        lblfecha_F_R.setText(" ");

        lblFecha_R.setForeground(new java.awt.Color(255, 255, 255));
        lblFecha_R.setText("jLabel3");

        lblHora_R.setForeground(new java.awt.Color(255, 255, 255));
        lblHora_R.setText("jLabel3");

        lblNumeArea.setForeground(new java.awt.Color(255, 255, 255));
        lblNumeArea.setText("jLabel3");

        lblNomArea.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblNomArea.setForeground(new java.awt.Color(43, 43, 43));
        lblNomArea.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        lblNomArea.setText("jLabel3");

        jLabel3.setForeground(new java.awt.Color(43, 43, 43));
        jLabel3.setText("jLabel3");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblFecha_R, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lblHora_R, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lblNumeArea)
                        .addGap(66, 66, 66))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(lblfecha_I_R, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblG_R)
                        .addGap(10, 10, 10)
                        .addComponent(lblfecha_F_R, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(115, 115, 115)
                        .addComponent(lblfecha_F2, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 205, Short.MAX_VALUE)))
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(lblNomArea, javax.swing.GroupLayout.PREFERRED_SIZE, 339, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(148, 148, 148))))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(jLabel15))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(lblFecha_R)
                                .addComponent(lblHora_R))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(lblNumeArea))
                            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel5)
                                .addComponent(jLabel3))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lblNomArea)))
                .addGap(19, 19, 19)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblfecha_F2)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblfecha_I_R)
                        .addComponent(lblG_R)
                        .addComponent(lblfecha_F_R)))
                .addContainerGap(33, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jpanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 592, Short.MAX_VALUE))
                    .addComponent(jpanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtBuscarPaciente_RCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_txtBuscarPaciente_RCaretUpdate
        if(cbFecha_R.isSelected()== true && (fecha_inicio_R.getDate()==null || fecha_fin_R.getDate()==null)){
            JOptionPane.showMessageDialog(rootPane, "Debe seleccionar un rango de fechas");
        }

        if(cbFecha_R.isSelected()==true){
            buscar_examen();
        }else if(cbFecha_R.isSelected()==false){
            BuscarPacientesDIA_R();
        }

    }//GEN-LAST:event_txtBuscarPaciente_RCaretUpdate

    private void txtBuscarPaciente_RKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBuscarPaciente_RKeyTyped
        char tecla= evt.getKeyChar();
        if(tecla==KeyEvent.VK_ENTER){
            tb_Examenes_R.getSelectionModel().setSelectionInterval(0, 0);
            tb_Examenes_R.requestFocus();
        }
        
        ///LIMITE DE DIGITOS
       if (txtBuscarPaciente_R.getText().length()>40)
       {
                evt.consume();
       }
    }//GEN-LAST:event_txtBuscarPaciente_RKeyTyped

    private void btnBuscarPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarPActionPerformed
        try{

            String fecha = lblFecha_R.getText();
            int diaAC = Integer.parseInt(fecha.substring(0, 2));
            int mesAC = Integer.parseInt(fecha.substring(3, 5));
            int anioAC = Integer.parseInt(fecha.substring(6, 10));

            String diaIN = new SimpleDateFormat("dd").format(fecha_inicio_R.getDate());
            String mesIN = new SimpleDateFormat("MM").format(fecha_inicio_R.getDate());
            String anioIN = new SimpleDateFormat("yyy").format(fecha_inicio_R.getDate());
         
            
//            int diaIN = fecha_inicio_R.getCalendar().get(Calendar.DAY_OF_MONTH);
//            int mesIN = fecha_inicio_R.getCalendar().get(Calendar.MONTH) + 1;
//            int anioIN = fecha_inicio_R.getCalendar().get(Calendar.YEAR);

            String diaFN = new SimpleDateFormat("dd").format(fecha_fin_R.getDate());
            String mesFN = new SimpleDateFormat("MM").format(fecha_fin_R.getDate());
            String anioFN = new SimpleDateFormat("yyy").format(fecha_fin_R.getDate());
         
            
//            int diaFN = fecha_fin_R.getCalendar().get(Calendar.DAY_OF_MONTH);
//            int mesFN = fecha_fin_R.getCalendar().get(Calendar.MONTH) + 1;
//            int anioFN = fecha_fin_R.getCalendar().get(Calendar.YEAR);

            //            if(fecha_inicio.getDate()==null || fecha_fin.getDate()==null){
                //              JOptionPane.showMessageDialog(rootPane, "Seleccione un rango de fechas");
                //            }else{
                //                 if(diaIN > diaAC || mesIN > mesAC || anioIN > anioAC){
                    //                        JOptionPane.showMessageDialog(rootPane, "Seleccione una fecha de inicio \n menor a la actual: " + diaAC + "-" +
                        //                        mesAC + "-" + anioAC);
                    //                        fecha_inicio.setDate(null);
                    //                 }else{
                    //                       if(diaFN > diaAC || mesFN > mesAC || anioFN > anioAC){
                        //                                JOptionPane.showMessageDialog(rootPane, "Seleccione una fecha de termino \n menor a la actual: " + diaAC + "-" +
                            //                                mesAC + "-" + anioAC);
                        //                                fecha_fin.setDate(null);
                        //                       }else{
                                buscar_examen();
                                lblfecha_I_R.setText(diaIN + "/" + mesIN + "/" + anioIN);
                                lblfecha_F_R.setText(diaFN + "/" + mesFN + "/" + anioFN);
                                lblG_R.setVisible(true);
                                lblfecha_I_R.setVisible(true);
                                lblfecha_F_R.setVisible(true);
                                txtBuscarPaciente_R.requestFocus();
                        //                       }
                    //                }
                //
                //            }

            //            if(tb_Examenes.getRowCount()==0){
                //                lblRegistro.setVisible(true);
                ////                JOptionPane.showMessageDialog(rootPane, "No se encontraron registros");
                //            }else{
                //                lblRegistro.setVisible(false);
                //            }

        }catch(Exception e) {
            JOptionPane.showMessageDialog(rootPane, "Seleccione un rango de fechas");
        }
    }//GEN-LAST:event_btnBuscarPActionPerformed

    private void cbFecha_RActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbFecha_RActionPerformed
       seleccion();
    }//GEN-LAST:event_cbFecha_RActionPerformed

    private void cbFecha_RPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_cbFecha_RPropertyChange

    }//GEN-LAST:event_cbFecha_RPropertyChange

    private void fecha_fin_RKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fecha_fin_RKeyTyped

    }//GEN-LAST:event_fecha_fin_RKeyTyped

    private void fecha_inicio_RKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fecha_inicio_RKeyTyped
        //        char tecla= evt.getKeyChar();
        //        if(tecla==KeyEvent.VK_ENTER){
            //            btnBuscarP.doClick();
            //        }
    }//GEN-LAST:event_fecha_inicio_RKeyTyped

    private void fecha_inicio_RPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_fecha_inicio_RPropertyChange
        //validar_fecha();
    }//GEN-LAST:event_fecha_inicio_RPropertyChange

    private void VerExamenesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VerExamenesActionPerformed
    
    }//GEN-LAST:event_VerExamenesActionPerformed

    private void Ver_ResultadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Ver_ResultadoActionPerformed
        try {
           int filaselec=tb_Examenes_R.getSelectedRow();
           if(filaselec<0){
               JOptionPane.showMessageDialog(rootPane, "Seleccione un Registro");
           }else{
             String cod=tb_Examenes_R.getValueAt(filaselec, 7).toString();
         
            Map parametros=new HashMap();
            parametros.put("COD_DET",cod);
            
                JasperPrint informe=JasperFillManager.fillReport(getClass().
                    getResourceAsStream("/Reportes/RX/RX_RESULTADO.jasper"), parametros,c.conectar());

                JasperViewer ventana= new JasperViewer(informe,false);
                ventana.setTitle("RESULTADO - "+tb_Examenes_R.getValueAt(filaselec, 7).toString());
                ventana.setVisible(true);
           }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Error al Cargar el reporte"+e.getMessage());
            }
    }//GEN-LAST:event_Ver_ResultadoActionPerformed

    private void txtBuscarPaciente_RKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBuscarPaciente_RKeyReleased
        txtBuscarPaciente_R.setText(txtBuscarPaciente_R.getText().toUpperCase());
    }//GEN-LAST:event_txtBuscarPaciente_RKeyReleased

    public void buscar_examen(){
    
           int dia = fecha_inicio_R.getCalendar().get(Calendar.DAY_OF_MONTH);
           int mes = fecha_inicio_R.getCalendar().get(Calendar.MONTH) + 1;
           int anio = fecha_inicio_R.getCalendar().get(Calendar.YEAR);
                       
           int fechaI;
                       
                       if(mes<10 && dia<10){
                           fechaI = Integer.parseInt(anio + "0" + mes + "0" + dia);
                       }else{                           
                           if(mes<10 && dia>=10){
                           fechaI = Integer.parseInt(anio + "0"+ mes + dia);
                           }else{
                               if(mes >=10 && dia<10){
                                 fechaI = Integer.parseInt( anio + mes + "0"+ dia);
                               }else{
                                   fechaI = anio +  mes + dia ;
                               }
                           }
                       }

                       
           int dia1 = fecha_fin_R.getCalendar().get(Calendar.DAY_OF_MONTH);
           int mes1 = fecha_fin_R.getCalendar().get(Calendar.MONTH) + 1;
           int anio1 = fecha_fin_R.getCalendar().get(Calendar.YEAR);
                       
           int fechaF;
                       
                       if(mes1<10 && dia1<10){
                           fechaF = Integer.parseInt(anio1 + "0" + mes1 + "0" + dia1);
                       }else{                           
                           if(mes1<10 && dia1>=10){
                           fechaF = Integer.parseInt(anio1 + "0"+ mes1 +  dia1);
                           }else{
                               if(mes1 >=10 && dia1<10){
                                 fechaF = Integer.parseInt(anio1  + mes1 + "0"+ dia1);
                               }else{
                                   fechaF = anio1 + mes1 + dia1 ;
                               }
                           }
                       }

  
        String buscar="",servicioArea="";
        buscar = txtBuscarPaciente_R.getText();
        
        
    String consulta="";
        try {
            tb_Examenes_R.setModel(new DefaultTableModel());
            String titulos[]={"ID_HC","N° HC","Nombre del Paciente","DNI",
            "Acto Médico","Nomenclatura","Fecha Examen","Cod_Detalle"};
            m3=new DefaultTableModel(null,titulos);
            JTable p=new JTable(m3);
            String fila[]=new String[8];

            RX_EC_BUSCAR_EXAMEN_CAJA obj=new RX_EC_BUSCAR_EXAMEN_CAJA();
            consulta="exec RX_EC_BUSCAR_RESULTADOS_RX_FECHAS_3 ?,?,?";
            PreparedStatement cmd = obj.getCn().prepareStatement(consulta);
            cmd.setInt(1,fechaI);
            cmd.setInt(2, fechaF);
            cmd.setString(3, buscar);          
            
            ResultSet r= cmd.executeQuery();
            int c=1;
            while(r.next()){               
                fila[0]=r.getString(1);
                fila[1]=r.getString(2);
                fila[2]=r.getString(3);
                fila[3]=r.getString(4);
                fila[4]=r.getString(5);
                fila[5]=r.getString(6);
                fila[6]=r.getString(7);
                fila[7]=r.getString(8);
                
                
                m3.addRow(fila);
                c++;
            }
            tb_Examenes_R.setModel(m3);
            TableRowSorter<TableModel> elQueOrdena=new TableRowSorter<TableModel>(m3);
            tb_Examenes_R.setRowSorter(elQueOrdena);
            this.tb_Examenes_R.setModel(m3);
            
            formatoExamen();
            
            
            
        } catch (Exception e) {
            System.out.println("Error buscar examen: " + e.getMessage());
        }
    }
    
    
    public void inicializar_tabla_Examenes(){       
        try {
            
            String titulosb[]={"ID_HC","N° HC","Nombre del Paciente","DNI",
            "Acto Médico","Nomenclatura","Fecha Examen","Cod_Detalle"};
            msb=new DefaultTableModel(null,titulosb);
            JTable psb=new JTable(msb);
            String filasb[]=new String[8];
            tb_Examenes_R.setModel(msb);
            TableRowSorter<TableModel> elQueOrdenasb=new TableRowSorter<TableModel>(msb);
            tb_Examenes_R.setRowSorter(elQueOrdenasb);
            this.tb_Examenes_R.setModel(msb);
            
            formatoExamen();
            
        } catch (Exception e) {
            System.out.println("error inicializar tabla: " + e);
        }
            
    }   
    
    public void mostrarPacientes(){
        try {
                     
            String consulta="";
            
            tb_Examenes_R.setModel(new DefaultTableModel());
            String titulos[]={"ID_HC","N° HC","Nombre del Paciente","DNI",
            "Acto Médico","Nomenclatura","Fecha Examen", "Cod_Detalle"};
            m1=new DefaultTableModel(null,titulos);
            JTable p=new JTable(m1);
            String fila[]=new String[8];
            Usuario obj=new Usuario();
            consulta="exec RX_EC_LISTAR_RESULTADOS_RX_3 ";
            PreparedStatement cmd = obj.getCn().prepareStatement(consulta);
            
            ResultSet r= cmd.executeQuery();
            while(r.next()){
            for (int i=0; i<8; i++){
            fila[i]=r.getString(i+1);
            }
                m1.addRow(fila);
            }
            tb_Examenes_R.setModel(m1);
            TableRowSorter<TableModel> elQueOrdena=new TableRowSorter<TableModel>(m1);
            tb_Examenes_R.setRowSorter(elQueOrdena);
            tb_Examenes_R.setModel(m1);
                       
            formatoExamen();
            
        } catch (Exception e) {
            System.out.println("Error mostrar paciente: " + e.getMessage());
        }       
    }
    
    public void formatoExamen(){                    
            tb_Examenes_R.getColumnModel().getColumn(0).setPreferredWidth(80); 
            tb_Examenes_R.getColumnModel().getColumn(1).setPreferredWidth(80);
            tb_Examenes_R.getColumnModel().getColumn(2).setPreferredWidth(300);
            tb_Examenes_R.getColumnModel().getColumn(3).setPreferredWidth(80);
            tb_Examenes_R.getColumnModel().getColumn(4).setPreferredWidth(80); 
            tb_Examenes_R.getColumnModel().getColumn(5).setPreferredWidth(400);
            tb_Examenes_R.getColumnModel().getColumn(6).setPreferredWidth(110);  
            tb_Examenes_R.getColumnModel().getColumn(7).setPreferredWidth(100);
//            //Ocultar
            tb_Examenes_R.getColumnModel().getColumn(0).setMinWidth(0);
            tb_Examenes_R.getColumnModel().getColumn(0).setMaxWidth(0);                
    }
        
    public void mostrarArea(){
        String consulta="";
        try {
            consulta="EXEC RX_EC_SERVICIO ";
            
            PreparedStatement cmd = RC.getCn().prepareStatement(consulta);        
            ResultSet r= cmd.executeQuery();
            int c=1;
            while(r.next()){
                lblNumeArea.setText(r.getString(1));
                lblNomArea.setText(r.getString(2));
            }
            
        } catch (Exception e) {
            System.out.println("Error carga area : " + e.getMessage());
        }
    } 
    
    public void BuscarPacientesDIA_R(){
        try {
                     
            String consulta="";
            
            tb_Examenes_R.setModel(new DefaultTableModel());
            String titulos[]={"ID_HC","N° HC","Nombre del Paciente","DNI",
            "Acto Médico","Nomenclatura","Fecha Examen", "Cod_Detalle"};
            m2=new DefaultTableModel(null,titulos);
            JTable p=new JTable(m2);
            String fila[]=new String[8];
            Usuario obj=new Usuario();
            consulta="exec RX_EC_BUSCAR_RESULTADOS_RX_3 ?";
            PreparedStatement cmd = obj.getCn().prepareStatement(consulta);            
            cmd.setString(1, txtBuscarPaciente_R.getText());
       
            ResultSet r= cmd.executeQuery();
            while(r.next()){
            for (int i=0; i<8; i++){
            fila[i]=r.getString(i+1);
            }
                m2.addRow(fila);
            }
            tb_Examenes_R.setModel(m2);
            TableRowSorter<TableModel> elQueOrdena=new TableRowSorter<TableModel>(m2);
            tb_Examenes_R.setRowSorter(elQueOrdena);
            tb_Examenes_R.setModel(m2);
                       
            formatoExamen();
            
            
            
        } catch (Exception e) {
            System.out.println("Error mostrar paciente: " + e.getMessage());
        }
        
    }
    
    public void seleccion(){
        if(cbFecha_R.isSelected()==true){
            fecha_inicio_R.setEnabled(true);
            fecha_fin_R.setEnabled(true);
            txtBuscarPaciente_R.setText("");
            lblfecha_I_R.setVisible(true);
            lblfecha_F_R.setVisible(true);
//            lblG_R.setVisible(true);
            btnBuscarP.setEnabled(true);
        }else{
            fecha_inicio_R.setEnabled(false);
            fecha_fin_R.setEnabled(false);
            fecha_inicio_R.setDate(null);
            fecha_fin_R.setDate(null);
            txtBuscarPaciente_R.setText("");
            lblfecha_I_R.setVisible(false);
            lblfecha_F_R.setVisible(false);
            lblG_R.setVisible(false);
            btnBuscarP.setEnabled(false);
            txtBuscarPaciente_R.requestFocus();
        }
    }
        
    public static String fechaActual(){
        Date now = new Date(System.currentTimeMillis());
        SimpleDateFormat date = new SimpleDateFormat("dd/MM/yyyy");
        return date.format(now);
    }
    
    public void calcula() {
        Calendar calendario = new GregorianCalendar();
        java.util.Date fechaHoraActual = new java.util.Date();


        calendario.setTime(fechaHoraActual);
        ampm = calendario.get(Calendar.AM_PM) == Calendar.AM ? "AM" : "PM";

        if (ampm.equals("PM")) {
            int h = calendario.get(Calendar.HOUR_OF_DAY) - 12;
            hora = h > 9 ? "" + h : "0" + h;
        } else {
            hora = calendario.get(Calendar.HOUR_OF_DAY) > 9 ? "" + calendario.get(Calendar.HOUR_OF_DAY) : "0" + calendario.get(Calendar.HOUR_OF_DAY);
        }
        minutos = calendario.get(Calendar.MINUTE) > 9 ? "" + calendario.get(Calendar.MINUTE) : "0" + calendario.get(Calendar.MINUTE);
        segundos = calendario.get(Calendar.SECOND) > 9 ? "" + calendario.get(Calendar.SECOND) : "0" + calendario.get(Calendar.SECOND);
    }
    
    public void cerrar(){
        int eleccion = JOptionPane.showConfirmDialog(rootPane,"¿Desea realmente salir del formulario?","Mensaje de Confirmación",
        JOptionPane.YES_NO_OPTION,
        JOptionPane.QUESTION_MESSAGE);
        if (eleccion == JOptionPane.YES_OPTION)
        {
            dispose();   
//            PrincipalMDI MDI= new PrincipalMDI();
//            MDI.setVisible(true);  
        }else{
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RX_EC_BUSCAR_RESULTADOS.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RX_EC_BUSCAR_RESULTADOS.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RX_EC_BUSCAR_RESULTADOS.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RX_EC_BUSCAR_RESULTADOS.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RX_EC_BUSCAR_RESULTADOS().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem VerExamenes;
    private javax.swing.JMenuItem Ver_Resultado;
    private javax.swing.JButton btnBuscarP;
    private javax.swing.JCheckBox cbFecha_R;
    private com.toedter.calendar.JDateChooser fecha_fin_R;
    private com.toedter.calendar.JDateChooser fecha_inicio_R;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel23;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPanel jpanel;
    private javax.swing.JLabel lblFecha_R;
    private javax.swing.JLabel lblG_R;
    private javax.swing.JLabel lblHora_R;
    private javax.swing.JLabel lblNomArea;
    private javax.swing.JLabel lblNumeArea;
    public static javax.swing.JLabel lblUsu;
    private javax.swing.JLabel lblfecha_F2;
    private javax.swing.JLabel lblfecha_F_R;
    private javax.swing.JLabel lblfecha_I_R;
    private javax.swing.JTable tb_Examenes_R;
    private javax.swing.JLabel titulo5;
    private javax.swing.JTextField txtBuscarPaciente_R;
    // End of variables declaration//GEN-END:variables

    @Override
    public void run() {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    Thread ct = Thread.currentThread();
        while (ct == h1) {
            calcula();
            if(cbFecha_R.isSelected()==false){
                mostrarPacientes();
            }
            
            lblHora_R.setText(hora + ":" + minutos + ":" + segundos + " " + ampm);
            try {
                Thread.sleep(10000);
            } catch (InterruptedException e) {
            }
        }
    }
}
